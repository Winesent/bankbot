from decimal import Decimal, InvalidOperation
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from services.balance import BalanceService
from keyboards.main import admin_keyboard, main_keyboard, cancel_keyboard
from config import Config

router = Router()


class AdminStates(StatesGroup):
    admin_action = State()
    admin_username = State()
    admin_amount = State()


async def is_admin(user_id: int) -> bool:
    return user_id in Config.ADMIN_IDS


@router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard())


@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())
        return

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())


@router.message(F.text.in_(["–ù–∞—á–∏—Å–ª–∏—Ç—å", "–°–ø–∏—Å–∞—Ç—å", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"]))
async def admin_action(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    await state.update_data(action=message.text)
    await state.set_state(AdminStates.admin_username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=cancel_keyboard())


@router.message(AdminStates.admin_username)
async def admin_process_username(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await state.clear()
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=main_keyboard())
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_keyboard())
        return

    username = message.text.lstrip('@')
    if not username:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        return

    data = await state.get_data()
    action = data['action']

    if action == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        user = BalanceService.get_user_by_username(username)
        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å @{username}: {user.balance}")
        await state.clear()
        return

    await state.update_data(username=username)
    await state.set_state(AdminStates.admin_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")


@router.message(AdminStates.admin_amount)
async def admin_process_amount(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await state.clear()
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=main_keyboard())
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_keyboard())
        return

    try:
        amount = Decimal(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("Amount must be positive")
    except (InvalidOperation, ValueError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.5):")
        return

    data = await state.get_data()
    action = data['action']
    username = data['username']

    try:
        if action == "–ù–∞—á–∏—Å–ª–∏—Ç—å":
            user = BalanceService.admin_update_balance(username, amount)
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å @{username} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}\n"
                f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}",
                reply_markup=admin_keyboard()
            )
        elif action == "–°–ø–∏—Å–∞—Ç—å":
            user = BalanceService.admin_update_balance(username, -amount)
            await message.answer(
                f"‚úÖ –° @{username} —Å–ø–∏—Å–∞–Ω–æ {amount}\n"
                f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}",
                reply_markup=admin_keyboard()
            )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await state.clear()