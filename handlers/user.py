from decimal import Decimal, InvalidOperation
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from config import Config
from services.balance import BalanceService
from keyboards.main import main_keyboard, cancel_keyboard

router = Router()

class TransferStates(StatesGroup):
    enter_username = State()
    enter_amount = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    user = BalanceService.get_or_create_user(message.from_user.id, message.from_user.username)
    is_admin = message.from_user.id in Config.ADMIN_IDS
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç!\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}",
        reply_markup=main_keyboard(is_admin)
    )

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def check_balance(message: Message):
    user = BalanceService.get_or_create_user(message.from_user.id, message.from_user.username)
    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}")

@router.message(F.text == "üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏")
async def start_transfer(message: Message, state: FSMContext):
    await state.set_state(TransferStates.enter_username)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
        reply_markup=cancel_keyboard()
    )

@router.message(TransferStates.enter_username)
async def process_username(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=main_keyboard())
        return

    username = message.text.lstrip('@')
    if not username:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        return

    await state.update_data(username=username)
    await state.set_state(TransferStates.enter_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")

@router.message(TransferStates.enter_amount)
async def process_amount(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=main_keyboard())
        return

    try:
        amount = Decimal(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞")
    except (InvalidOperation, ValueError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.5):")
        return

    data = await state.get_data()
    username = data['username']

    try:
        sender, recipient = BalanceService.transfer(
            from_user_id=message.from_user.id,
            to_username=username,
            amount=amount
        )
        await message.answer(
            f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
            f"üí∏ –°—É–º–º–∞: {amount}\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient.username}\n"
            f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {sender.balance}",
            reply_markup=main_keyboard()
        )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()